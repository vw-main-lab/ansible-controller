---
- name: Configure base settings
  tags:
    - base
    - full
  hosts: mate-01
  tasks:

    - name: Include role general.utils.install-utils
      include_role:
        name: "general.utils.install-utils"

    - name: Include role general.utils.install-webmin
      include_role:
        name: "general.utils.install-webmin"
  
    - name: Include role general.system.set-network
      include_role:
        name: "general.system.set-network"
      vars:
        set_network_json: "{{ lab_host_conf_file }}"
        set_network_manager: ""

    - name: Include role general.system.set-hostkeys
      include_role:
        name: "general.system.set-hostkeys"
      vars:
        set_hostkeys_restart_service: false
        set_hostkeys_json: "{{ lab_host_conf_file }}"
        
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      meta: flush_handlers
        
    - name: Delayed reboot
      shell: /usr/bin/sleep 5 && /usr/sbin/reboot
      async: 1
      poll: 0
      args:
        executable: /bin/bash
        
    - name: Sleep for 15 seconds before ending play
      wait_for:
        timeout: 15
      delegate_to: localhost

- name: Configure advanced settings
  tags:
    - advanced
    - full
  hosts: mate-01
  gather_facts: yes # gather_facts turned off not to fail waiting for host to be up
  tasks:

    #~ - name: Include role general.utils.update-os
      #~ include_role:
        #~ name: "general.utils.update-os"

    #~ - name: Include role general.utils.upgrade-packages
      #~ include_role:
        #~ name: "general.utils.upgrade-packages"
    
    #~ - name: Include role general.system.set-applications
      #~ include_role:
        #~ name: "general.system.set-applications"
      #~ vars:
        #~ set_applications_json: "{{ lab_host_conf_file }}"
   
    #~ - name: Include role general.system.set-usersandgroups
      #~ include_role:
        #~ name: "general.system.set-usersandgroups"
      #~ vars:
        #~ set_usersandgroups_json: "{{ lab_host_conf_file }}"


##########################
# LOGSTASH
##########################

    #~ - name: Install Logstash
      #~ include_role:
        #~ name: "wares.lan.logstash"
      #~ vars:
        #~ wares_lan_logstash_actions: ["install"]
        #~ wares_lan_logstash_source:
          #~ temporary_dir: "/var/tmp"
          #~ extracted_dirname: "logstash-8.10.4"
          #~ download_url: "https://artifacts.elastic.co/downloads/logstash/logstash-8.10.4-linux-x86_64.tar.gz"
          #~ checksum: "sha512:30a28d7caed427d38d1155fb220517ba97b5c37ba6e709bf2abbaa7f0bd8ee3cb9676d74c82c7f77f23c54a6d67e921e1e847247f96e5d0e03cdac4b5699f13a"
          #~ config_filename: "logstash_conf_template.yml"
          #~ basic_auth_user: ""
          #~ basic_auth_password: ""
          #~ force_basic_auth: no
        #~ wares_lan_logstash_service:
          #~ filename: "logstash-wares.service"
          #~ description: "logstash (wares) service"
          #~ after: ["network.target"]
          #~ type: "simple"
          #~ killmode: "process"
          #~ execstart: "{{ wares_lan_logstash.binary_dir }}/bin/logstash -f {{ wares_lan_logstash.config_dir }}/{{ wares_lan_logstash.config_filename }}"
          #~ wantedby: "multi-user.target"
          #~ user: "{{ wares_lan_logstash.user }}"
          #~ group: "{{ wares_lan_logstash.group }}"
        #~ wares_lan_logstash:
          #~ binary_dir: "/usr/local/bin/logstash"
          #~ config_dir: "/usr/local/bin/logstash/config"
          #~ user: "logstash"
          #~ group: "users"
          #~ config_filename: "logstash-conf.yml"
          #~ run_as_service: true
          #~ inputs:
            #~ beats:
              #~ - {id: 'standard-port', enabled: true, port: 5044}
              #~ - {id: 'custom-port', enabled: false, port: 5045}
          #~ outputs:
            #~ elasticsearch:
              #~ enabled: true
              #~ hosts:
                #~ - {id: 'dev', url: 'http://localhost', enabled: true, port: 9201}
                #~ - {id: 'prod', url: 'http://es.domain.com', enabled: false, port: 9202}
              #~ index: "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
              #~ ilm_enabled: False
              #~ ssl_enabled: False
              #~ ssl_certificate_verification: False
              #~ cacert: ""
              #~ auth:
                #~ api_key: ""
                #~ username: ""
                #~ password: ""
            #~ kafka:
              #~ enabled: true
              #~ hosts: 
                #~ - {id: 'dev', servername: 'localhost', enabled: true, port: 9092}
                #~ - {id: 'prod', servername: 'kafka.domain.com', enabled: false, port: 9092}
              #~ codec: "json"
              #~ topic_id: "incoming_log"
              #~ id: "test_kafka_incoming"

    #~ - name: Edit Json Configuration (Filters)
      #~ include_role:
        #~ name: "wares.lan.logstash"
      #~ vars:
        #~ nodebug: false
        #~ wares_lan_logstash_actions: ["edit_json_config"]
        #~ wares_lan_logstash_json_block_section: "FILTERBLOCKS"
        #~ wares_lan_logstash_json_block_name: "Specific application filters"
        #~ wares_lan_logstash_json_config:
          #~ file_path: "/usr/local/bin/logstash/config/logstash-config.json"
        #~ wares_lan_logstash_json_condition: |
          #~ {
            #~ "Name": "APP001 code",
            #~ "Token": "1d564fz6e4f6ze4f6zed4ez",
            #~ "String": "else if \"1d564fz6e4f6ze4f6zed4ez\" in [logstash_application_token]",
            #~ "Filters": [
              #~ {
                #~ "Name": "Grok filter for new application",
                #~ "Type": "grok",
                #~ "Content": "match => { \"message\" => \"?<app_timestamp>%{GREEDYDATA} %{GREEDYDATA}) :: %{LOGLEVEL} :: %{IPV4} - - \\[%{GREEDYDATA}\\ %{TIME}\\]  %{WORD:http_method}%{GREEDYDATA:url_path} HTTP/%{NUMBER:http_version}  %{NUMBER:http_status_code} -\" }"
              #~ },
              #~ {
                #~ "Name": "Date filter",
                #~ "Type": "date",
                #~ "Content": "locale => \"en\"\nmatch => \"[\"app_timestamp\"], \"yyyy-MM-dd HH:mm:ss,SSS\"]\ntimezone => \"Europe/Paris\"\ntarget => \"timestamp\"\nadd_field => { \"hello\" => \"world\" }"
              #~ }
            #~ ]
          #~ }


    #~ - name: Edit Json Configuration (Beats)
      #~ include_role:
        #~ name: "wares.lan.logstash"
      #~ vars:
        #~ nodebug: false
        #~ wares_lan_logstash_actions: ["edit_json_config"]
        #~ wares_lan_logstash_json_block_section: "BEATBLOCKS"
        #~ wares_lan_logstash_json_block_name: "Filestreams"
        #~ wares_lan_logstash_json_config:
          #~ file_path: "/usr/local/bin/logstash/config/logstash-config.json"
        #~ wares_lan_logstash_json_token: ""
        #~ wares_lan_logstash_json_condition: |
          #~ {
            #~ "Id": "my-filestream-id",
            #~ "Enabled": true,
            #~ "Hosts": [
              #~ "server-host-01"
            #~ ],
            #~ "Os": "Linux",
            #~ "Paths": [
              #~ "/var/log/*.log",
              #~ "/var/log/other/daily.log"
            #~ ],
            #~ "Token": "1d564fz6e4f6ze4f6zed4ez",
            #~ "Description": "Some example input filestream",
            #~ "Fields": {
                #~ "app_code": "APP001",
                #~ "logs_retention": "month",
                #~ "logs_type": "testlogs",
                #~ "logstash_application_token": "1d564fz6e4f6ze4f6zed4ez"
              #~ },
            #~ "FieldsUnderRoot": true
          #~ }

    #~ - name: Include role wares.lan.logstash
      #~ include_role:
        #~ name: "wares.lan.logstash"
      #~ vars:
        #~ wares_lan_logstash_actions: ["update_logstash_filters"]
        #~ wares_lan_logstash:
          #~ config_dir: "/usr/local/bin/logstash/config"
          #~ config_filename: "logstash-conf.yml"
        #~ wares_lan_logstash_json_config:
          #~ file_path: "/usr/local/bin/logstash/config/logstash-config.json"
          #~ remote_src: yes


##########################
# FILEBEAT
##########################

    - name: Install beats
      include_role:
        name: "wares.lan.logstash"
      vars:
        nodebug: false
        wares_lan_logstash_actions: ["install_beats"]
        wares_lan_logstash_beats_hosts: ["*"]
        wares_lan_logstash_beats_tokens: ["*"]
        wares_lan_logstash_json_config:
          file_path: "/usr/local/bin/logstash/config/logstash-config.json"
          remote_src: yes
        wares_lan_filebeat_fs:
          binary_dir: "/usr/local/bin/filebeat"
          config_dir: "/usr/local/bin/filebeat/config"
          user: "filebeat"
          group: "users"
          config_filename: "filebeat.yml"
          run_as_service: false
